/home/esashika/Labo/Esashika-torchdiffeq/examples/odenet_mnist.py
import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=160)
parser.add_argument('--data_aug', type=eval, default=True, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.1)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)

parser.add_argument('--save', type=str, default='./experiment1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)

parser.add_argument('--odesolver', type=str, default='dopri5', choices=['explicit_adams','fixed_adams','adams','tsit5','dopri5','euler','midpoint','rk4'])
parser.add_argument('--odestride', type=float, default=1e-3)
parser.add_argument('--uniform', type=eval, default=False, choices=[True, False])
parser.add_argument('--layer_depth', type=int, default=6)
parser.add_argument('--dataset', type=str, default='mnist')

args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.GroupNorm(min(32, dim), dim)


class ResBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(ResBlock, self).__init__()
        self.norm1 = norm(inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.norm2 = norm(planes)
        self.conv2 = conv3x3(planes, planes)

    def forward(self, x):
        shortcut = x

        out = self.relu(self.norm1(x))

        if self.downsample is not None:
            shortcut = self.downsample(out)

        out = self.conv1(out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(out)

        return out + shortcut


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self, dim):
        super(ODEfunc, self).__init__()
        self.norm1 = norm(dim)
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm2 = norm(dim)
        self.conv2 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm3 = norm(dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.norm1(x)
        out = self.relu(out)
        out = self.conv1(t, out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(t, out)
        out = self.norm3(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol, method=args.odesolver, options={'step_size':args.odestride})
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val


def get_mnist_loaders(data_aug=False, batch_size=128, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.MNIST(root='.data/mnist', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.MNIST(root='.data/mnist', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader

def get_fasion_mnist_loaders(data_aug=False, batch_size=128, test_batch_size=1000, perc=1.0):
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomCrop(28, padding=4),
            transforms.ToTensor(),
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
    ])

    train_loader = DataLoader(
        datasets.FashionMNIST(root='.data/fashion-mnist', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    train_eval_loader = DataLoader(
        datasets.FashionMNIST(root='.data/fashion-mnist', train=True, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.FashionMNIST(root='.data/fashion-mnist', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, train_eval_loader


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)


def accuracy(model, dataset_loader):
    total_correct = 0
    for x, y in dataset_loader:
        x = x.to(device)
        y = one_hot(np.array(y.numpy()), 10)

        target_class = np.argmax(y, axis=1)
        predicted_class = np.argmax(model(x).cpu().detach().numpy(), axis=1)
        total_correct += np.sum(predicted_class == target_class)
    return total_correct / len(dataset_loader.dataset)


def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger


def uniformarize_params(modules):
    def _rgetattr(obj, name):
        import functools
        return functools.reduce(getattr, [obj] + name.split(sep='.'))
    def mean_of_params(*tensors):
        return np.stack(tensors).mean(axis=0)[0]
    def set_param(name, param, modules):
        #param = param.fill_(1)
        param = torch.from_numpy(param) if isinstance(param, np.ndarray) else param
        param = torch.nn.Parameter(param) if not isinstance(param, torch.nn.Parameter) else param
        pre, _, post = name.rpartition('.')
        for l in modules:
            if pre:
                setattr(_rgetattr(l, pre), post, param)
            else:
                setattr(l, post, param)
    def get_params(name, modules):
        return [_rgetattr(l, name) for l in modules]
    def get_names(module):
        return [name for name, _param in module.named_parameters()]
    if len(modules) == 0:
        return
    for name in get_names(modules[0]):
        params = get_params(name, modules)
        params = mean_of_params(params)
        set_param(name, params, modules)

if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    if args.downsampling_method == 'conv':
        downsampling_layers = [
            nn.Conv2d(1, 64, 3, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
        ]
    elif args.downsampling_method == 'res':
        downsampling_layers = [
            nn.Conv2d(1, 64, 3, 1),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
        ]

    feature_layers = [ODEBlock(ODEfunc(64))] if is_odenet else [ResBlock(64, 64) for _ in range(args.layer_depth)]
    fc_layers = [norm(64), nn.ReLU(inplace=True), nn.AdaptiveAvgPool2d((1, 1)), Flatten(), nn.Linear(64, 10)]

    if args.layer_depth == 0:
        model = nn.Sequential(*downsampling_layers, *fc_layers).to(device)
    else:
        model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    if args.dataset == 'mnist':
        train_loader, test_loader, train_eval_loader = get_mnist_loaders(args.data_aug, args.batch_size, args.test_batch_size)
    elif args.dataset == 'fasion-mnist':
        train_loader, test_loader, train_eval_loader = get_fasion_mnist_loaders(args.data_aug, args.batch_size, args.test_batch_size)
    else:
        raise RuntimeError("Unknown dataset selected.")

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    if args.uniform:
        logger.info("Uniform switch is on.\nSome layers are share parameters.")
        if is_odenet:
            logger.warn("Uniform switch is on but network is constructed as odenet.\nSo uniform switch may cause unexpected effects.")

    for itr in range(args.nepochs * batches_per_epoch):

        if args.uniform:
            uniformarize_params(feature_layers)

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader)
                val_acc = accuracy(model, test_loader)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )

Namespace(adjoint=False, batch_size=128, data_aug=True, dataset='fasion-mnist', debug=False, downsampling_method='conv', gpu=0, layer_depth=8, lr=0.1, nepochs=160, network='resnet', odesolver='dopri5', odestride=0.001, save='experiments/201910041624/layer8-try10', test_batch_size=1000, tol=0.001, uniform=True)
Sequential(
  (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): GroupNorm(32, 64, eps=1e-05, affine=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): GroupNorm(32, 64, eps=1e-05, affine=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (8): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (9): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (10): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (11): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (12): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (13): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (14): ResBlock(
    (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (relu): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (15): GroupNorm(32, 64, eps=1e-05, affine=True)
  (16): ReLU(inplace=True)
  (17): AdaptiveAvgPool2d(output_size=(1, 1))
  (18): Flatten()
  (19): Linear(in_features=64, out_features=10, bias=True)
)
Number of parameters: 724746
Uniform switch is on.
Some layers are share parameters.
Epoch 0000 | Time 0.081 (0.081) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1003
Epoch 0001 | Time 0.104 (0.020) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.7228 | Test Acc 0.7209
Epoch 0002 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8460 | Test Acc 0.8361
Epoch 0003 | Time 0.097 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8466 | Test Acc 0.8409
Epoch 0004 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8730 | Test Acc 0.8646
Epoch 0005 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8690 | Test Acc 0.8625
Epoch 0006 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8892 | Test Acc 0.8782
Epoch 0007 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8900 | Test Acc 0.8836
Epoch 0008 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8869 | Test Acc 0.8768
Epoch 0009 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8936 | Test Acc 0.8850
Epoch 0010 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9087 | Test Acc 0.9003
Epoch 0011 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9045 | Test Acc 0.8932
Epoch 0012 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.8984 | Test Acc 0.8909
Epoch 0013 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9122 | Test Acc 0.9017
Epoch 0014 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9087 | Test Acc 0.8991
Epoch 0015 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9092 | Test Acc 0.9010
Epoch 0016 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9149 | Test Acc 0.9046
Epoch 0017 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9132 | Test Acc 0.9044
Epoch 0018 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9158 | Test Acc 0.9037
Epoch 0019 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9180 | Test Acc 0.9091
Epoch 0020 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9211 | Test Acc 0.9115
Epoch 0021 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9105 | Test Acc 0.8986
Epoch 0022 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9163 | Test Acc 0.9052
Epoch 0023 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9203 | Test Acc 0.9089
Epoch 0024 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9151 | Test Acc 0.9052
Epoch 0025 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9218 | Test Acc 0.9109
Epoch 0026 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9207 | Test Acc 0.9079
Epoch 0027 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9176 | Test Acc 0.9044
Epoch 0028 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9262 | Test Acc 0.9141
Epoch 0029 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9267 | Test Acc 0.9122
Epoch 0030 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9263 | Test Acc 0.9130
Epoch 0031 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9248 | Test Acc 0.9116
Epoch 0032 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9297 | Test Acc 0.9164
Epoch 0033 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9293 | Test Acc 0.9139
Epoch 0034 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9297 | Test Acc 0.9124
Epoch 0035 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9251 | Test Acc 0.9121
Epoch 0036 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9293 | Test Acc 0.9139
Epoch 0037 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9303 | Test Acc 0.9163
Epoch 0038 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9279 | Test Acc 0.9116
Epoch 0039 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9293 | Test Acc 0.9133
Epoch 0040 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9253 | Test Acc 0.9127
Epoch 0041 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9347 | Test Acc 0.9181
Epoch 0042 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9334 | Test Acc 0.9158
Epoch 0043 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9284 | Test Acc 0.9137
Epoch 0044 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9321 | Test Acc 0.9146
Epoch 0045 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9336 | Test Acc 0.9172
Epoch 0046 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9256 | Test Acc 0.9056
Epoch 0047 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9350 | Test Acc 0.9182
Epoch 0048 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9371 | Test Acc 0.9170
Epoch 0049 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9341 | Test Acc 0.9194
Epoch 0050 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9313 | Test Acc 0.9162
Epoch 0051 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9391 | Test Acc 0.9237
Epoch 0052 | Time 0.110 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9337 | Test Acc 0.9154
Epoch 0053 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9325 | Test Acc 0.9155
Epoch 0054 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9376 | Test Acc 0.9196
Epoch 0055 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9365 | Test Acc 0.9177
Epoch 0056 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9361 | Test Acc 0.9175
Epoch 0057 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9371 | Test Acc 0.9194
Epoch 0058 | Time 0.115 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9371 | Test Acc 0.9175
Epoch 0059 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9294 | Test Acc 0.9102
Epoch 0060 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9405 | Test Acc 0.9213
Epoch 0061 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9467 | Test Acc 0.9258
Epoch 0062 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9476 | Test Acc 0.9262
Epoch 0063 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9472 | Test Acc 0.9277
Epoch 0064 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9480 | Test Acc 0.9264
Epoch 0065 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9484 | Test Acc 0.9276
Epoch 0066 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9479 | Test Acc 0.9278
Epoch 0067 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9496 | Test Acc 0.9274
Epoch 0068 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9494 | Test Acc 0.9268
Epoch 0069 | Time 0.113 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9480 | Test Acc 0.9281
Epoch 0070 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9502 | Test Acc 0.9295
Epoch 0071 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9486 | Test Acc 0.9276
Epoch 0072 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9496 | Test Acc 0.9282
Epoch 0073 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9502 | Test Acc 0.9282
Epoch 0074 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9504 | Test Acc 0.9286
Epoch 0075 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9508 | Test Acc 0.9293
Epoch 0076 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9506 | Test Acc 0.9285
Epoch 0077 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9508 | Test Acc 0.9293
Epoch 0078 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9512 | Test Acc 0.9282
Epoch 0079 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9503 | Test Acc 0.9288
Epoch 0080 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9510 | Test Acc 0.9290
Epoch 0081 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9514 | Test Acc 0.9284
Epoch 0082 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9514 | Test Acc 0.9288
Epoch 0083 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9515 | Test Acc 0.9290
Epoch 0084 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9516 | Test Acc 0.9284
Epoch 0085 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9515 | Test Acc 0.9305
Epoch 0086 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9506 | Test Acc 0.9273
Epoch 0087 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9520 | Test Acc 0.9293
Epoch 0088 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9505 | Test Acc 0.9269
Epoch 0089 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9519 | Test Acc 0.9284
Epoch 0090 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9516 | Test Acc 0.9283
Epoch 0091 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9514 | Test Acc 0.9280
Epoch 0092 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9523 | Test Acc 0.9287
Epoch 0093 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9517 | Test Acc 0.9276
Epoch 0094 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9522 | Test Acc 0.9304
Epoch 0095 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9517 | Test Acc 0.9291
Epoch 0096 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9515 | Test Acc 0.9302
Epoch 0097 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9517 | Test Acc 0.9294
Epoch 0098 | Time 0.113 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9521 | Test Acc 0.9288
Epoch 0099 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9514 | Test Acc 0.9294
Epoch 0100 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9526 | Test Acc 0.9290
Epoch 0101 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9532 | Test Acc 0.9306
Epoch 0102 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9532 | Test Acc 0.9305
Epoch 0103 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9534 | Test Acc 0.9308
Epoch 0104 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9533 | Test Acc 0.9304
Epoch 0105 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9535 | Test Acc 0.9304
Epoch 0106 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9532 | Test Acc 0.9310
Epoch 0107 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9536 | Test Acc 0.9307
Epoch 0108 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9535 | Test Acc 0.9303
Epoch 0109 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9535 | Test Acc 0.9306
Epoch 0110 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9536 | Test Acc 0.9308
Epoch 0111 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9535 | Test Acc 0.9312
Epoch 0112 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9536 | Test Acc 0.9304
Epoch 0113 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9537 | Test Acc 0.9312
Epoch 0114 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9309
Epoch 0115 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9537 | Test Acc 0.9313
Epoch 0116 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9536 | Test Acc 0.9310
Epoch 0117 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9537 | Test Acc 0.9313
Epoch 0118 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9316
Epoch 0119 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9537 | Test Acc 0.9312
Epoch 0120 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9540 | Test Acc 0.9306
Epoch 0121 | Time 0.108 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9308
Epoch 0122 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9307
Epoch 0123 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9535 | Test Acc 0.9306
Epoch 0124 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9314
Epoch 0125 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9313
Epoch 0126 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9317
Epoch 0127 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9540 | Test Acc 0.9310
Epoch 0128 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9306
Epoch 0129 | Time 0.106 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9538 | Test Acc 0.9306
Epoch 0130 | Time 0.111 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9540 | Test Acc 0.9302
Epoch 0131 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9539 | Test Acc 0.9307
Epoch 0132 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9539 | Test Acc 0.9302
Epoch 0133 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9540 | Test Acc 0.9304
Epoch 0134 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9544 | Test Acc 0.9313
Epoch 0135 | Time 0.103 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9303
Epoch 0136 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9543 | Test Acc 0.9308
Epoch 0137 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9301
Epoch 0138 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9541 | Test Acc 0.9305
Epoch 0139 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9540 | Test Acc 0.9304
Epoch 0140 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9544 | Test Acc 0.9302
Epoch 0141 | Time 0.098 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9303
Epoch 0142 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9302
Epoch 0143 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9304
Epoch 0144 | Time 0.097 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9543 | Test Acc 0.9304
Epoch 0145 | Time 0.109 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9305
Epoch 0146 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9541 | Test Acc 0.9306
Epoch 0147 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9306
Epoch 0148 | Time 0.102 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9543 | Test Acc 0.9307
Epoch 0149 | Time 0.099 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9543 | Test Acc 0.9305
Epoch 0150 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9544 | Test Acc 0.9309
Epoch 0151 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9543 | Test Acc 0.9309
Epoch 0152 | Time 0.105 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9307
Epoch 0153 | Time 0.107 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9306
Epoch 0154 | Time 0.100 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9541 | Test Acc 0.9303
Epoch 0155 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9307
Epoch 0156 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9541 | Test Acc 0.9305
Epoch 0157 | Time 0.104 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9308
Epoch 0158 | Time 0.115 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9307
Epoch 0159 | Time 0.101 (0.019) | NFE-F 0.0 | NFE-B 0.0 | Train Acc 0.9542 | Test Acc 0.9307
